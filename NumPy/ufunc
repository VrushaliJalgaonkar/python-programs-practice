ufuncs stands for "Universal Functions" and they are NumPy functions that operate on the ndarray object.
ufuncs are used to implement vectorization in NumPy which is way faster than iterating over elements.
They also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation.
ufuncs also take additional arguments, like:
where : boolean array or condition defining where the operations should take place.
dtype : defining the return type of elements.
out : output array where the return value should be copied.

Converting iterative statements into a vector based operation is called vectorization.
It is faster as modern CPUs are optimized for such operations.

#Example - 1 : Add the Elements of Two Lists
import numpy as np
x = [1, 2, 3, 4]
y = [4, 5, 6, 7]
z = np.add(x, y)
print(z)


To create your own ufunc, you have to define a function, like you do with normal functions in Python, then you add it to your NumPy ufunc library with the frompyfunc() method.
The frompyfunc() method takes the following arguments:
function - the name of the function.
inputs - the number of input arguments (arrays).
outputs - the number of output arrays.

#Example - 2 : Create your own ufunc for addition
import numpy as np
def myadd(x, y):
  return x+y
myadd = np.frompyfunc(myadd, 2, 1)
print(myadd([1, 2, 3, 4], [5, 6, 7, 8]))


#Example - 3 : Addition
import numpy as np
arr1 = np.array([10, 11, 12, 13, 14, 15])
arr2 = np.array([20, 21, 22, 23, 24, 25])
newarr = np.add(arr1, arr2)
print(newarr)


#Example - 4 : Subtraction
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])
newarr = np.subtract(arr1, arr2)
print(newarr)


#Example - 5 : Multiplication
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])
newarr = np.multiply(arr1, arr2)
print(newarr)


#Example - 6 : Division
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 10, 8, 2, 33])
newarr = np.divide(arr1, arr2)
print(newarr)


#Example - 7 : Power
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 6, 8, 2, 33])
newarr = np.power(arr1, arr2)
print(newarr)


#Example - 8 : Modulo
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])
newarr = np.mod(arr1, arr2)
print(newarr)


#Example - 9 : Remainder
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])
newarr = np.remainder(arr1, arr2)
print(newarr)


#Example - 10 : Quotient and Mod, The divmod() function return both the quotient and the the mod. The return value is two arrays, the first array contains the quotient and second array contains the mod.
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])
newarr = np.divmod(arr1, arr2)
print(newarr)


#Example - 11 : Absolute Values
import numpy as np
arr = np.array([-1, -2, 1, 2, 3, -4])
newarr = np.absolute(arr)
print(newarr)


There are primarily five ways of rounding off decimals in NumPy:
truncation
fix
rounding
floor
ceil

#Example - 12 : Truncate elements using trunc() function
import numpy as np
arr = np.trunc([-3.1666, 3.6667])
print(arr)

#Example - 13 : Truncate elements using fix() function
import numpy as np
arr = np.trunc([-3.1666, 3.6667])
print(arr)

#Example - 14 : Round off 3.1666 to 2 decimal places
import numpy as np
arr = np.around(3.1666, 2)
print(arr)

#Example - 15 : Floor the elements of following array
import numpy as np
arr = np.floor([-3.1666, 3.6667])
print(arr)

#Example - 16 : Ceil the elements of following array
import numpy as np
arr = np.ceil([-3.1666, 3.6667])
print(arr)

#Example - 17 : Find log at base 2 of all elements of following array. The arange(1, 10) function returns an array with integers starting from 1 (included) to 10 (not included).
import numpy as np
arr = np.arange(1, 10)
print(np.log2(arr))

#Example - 18 : Find log at base 10 of all elements of following array
import numpy as np
arr = np.arange(1, 10)
print(np.log10(arr))

#Example - 19 : Find log at base e of all elements of following array
import numpy as np
arr = np.arange(1, 10)
print(np.log(arr))

#Example - 20 : Log at Any Base
from math import log
import numpy as np
nplog = np.frompyfunc(log, 2, 1)
print(nplog(100, 15))

#Example - 21 : Cummulative sum means partially adding the elements in array. The partial sum of [1, 2, 3, 4] would be [1, 1+2, 1+2+3, 1+2+3+4] = [1, 3, 6, 10].
import numpy as np
arr = np.array([1, 2, 3])
newarr = np.cumsum(arr)
print(newarr)




