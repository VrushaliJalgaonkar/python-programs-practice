#Example - 1 : Generate a random integer from 0 to 100
from numpy import random
x = random.randint(100)

#Example - 2 : Generate a random float from 0 to 1
x = random.rand()

#Example - 3 : Generate a 1-D array containing 5 random integers from 0 to 100
x=random.randint(100, size=(5))

#Example - 4 : Generate a 2-D array with 3 rows, each row containing 5 random integers from 0 to 100
x = random.randint(100, size=(3, 5))

#Example - 5 : Generate a 1-D array containing 5 random floats
x = random.rand(5)

#Example - 6 : Generate a 2-D array with 3 rows, each row containing 5 random numbers
x = random.rand(3, 5)

#Example - 7 : Generate a 2-D array that consists of the values in the array parameter (3, 5, 7, and 9)
x = random.choice([3, 5, 7, 9], size=(3, 5))

Output -->
[[5 9 7 5 9]
[3 7 7 9 7]
[3 7 9 9 5]]


Data Distribution is a list of all possible values, and how often each value occurs.

#Example - 8 : Return a 2-D array with 3 rows, each containing 5 values
x = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(3, 5))
print(x)

Output -->
[[5 5 7 7 7]
[7 5 7 7 7]
[7 5 7 7 7]]

#Example - 9 : Randomly shuffle elements of following array. The shuffle() method makes changes to the original array.
arr = np.array([1, 2, 3, 4, 5])
random.shuffle(arr)
print(arr)

#Example - 10 : Generate a random permutation of elements of following array. The permutation() method returns a re-arranged array (and leaves the original array un-changed).
arr = np.array([1, 2, 3, 4, 5])
print(random.permutation(arr))

Seaborn module :
Distplot stands for distribution plot, it takes as input an array and plots a curve corresponding to the distribution of points in the array.

#Example - 11 : Plotting a Distplot
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot([0, 1, 2, 3, 4, 5])
plt.show()


#Example - 12 : Plotting a Distplot Without the Histogram
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot([0, 1, 2, 3, 4, 5], hist=False)
plt.show()

Use the random.normal() method to get a Normal Data Distribution.
It has three parameters:
loc - (Mean) where the peak of the bell exists.
scale - (Standard Deviation) how flat the graph distribution should be.
size - The shape of the returned array.

#Example - 13 : Generate a random normal distribution of size 2x3 with mean at 1 and standard deviation of 2
from numpy import random
x = random.normal(loc=1, scale=2, size=(2, 3))
print(x)


#Example - 14 : Visualization of Normal Distribution
from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(random.normal(size=1000), hist=False)
plt.show()


#Example - 15 :


#Example - 16 :


#Example - 17 :


#Example - 18 :


#Example - 20 :